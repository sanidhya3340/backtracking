//N Queens Problem
#include<bits/stdc++.h>
using namespace std;


bool isSafe(vector<vector<bool>>vis,int i,int j){
    for(int c = j;c>=0;c--){
        if(vis[i][c] == true){
            return false;
        }
    }

    for(int r = i;r>=0;r--){
        if(vis[r][j] == true){
            return false;
        }
    }

    int r = i, c = j;

    while(r>=0 && c>=0){
        if(vis[r][c]==true){
            return false;
        }
        r--;
        c--;
    }
    
    r = i;
    c=j;
    
    while(r>=0&& c<vis.size()){
        if(vis[r][c] == true){
            return false;
        }
        
        r--;
        c++;
    }

    return true;
}

void solution(int row,vector<vector<bool>>vis,int n,int qpsf){
    
    if(row == n){
        if(qpsf == n){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(vis[i][j] == true){
                        cout<<"q";
                    }
                    else{
                        cout<<"_";
                    }
                }
                cout<<endl;
            }
            cout<<endl;
        }

        return;
    }

  for(int i=0;i<n;i++){
    if(vis[row][i] == false && isSafe(vis,row,i)){
        vis[row][i] = true;
        solution(row + 1 ,vis,n,qpsf+1);
        vis[row][i] = false;
    }
  }


}


int main()
{
    int n = 4;
    
    vector<vector<bool>>vis(n,vector<bool>(n,false));

    solution(0,vis,n,0);
}
