// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    public:
    
    vector<string>op;
    
    // int xmoves[4]={0,1,-1,0};
    // int ymoves[4]={1,0,0,-1};
    // char chari[4]={'R','D','U','L'};
    
    // bool isSafe(vector<vector<int>>m,int i,int j,vector<vector<int>>visited,int n){
    //     if(i<n && j<n && !visited[i][j] && m[i][j]==1){
    //         return true;
    //     }
    //     return false;
    // }
    
    void path(vector<vector<int>>m,int x,int y,vector<vector<int>>&visited,string dir,int n){
        if (x == n - 1 and y == n - 1) {
            op.push_back(dir);
            return;
        }
    
        if (m[x][y] == 0 or visited[x][y] == 1) return;
    
        // DFS
        visited[x][y] = 1;
        if (x > 0) path(m, x - 1, y,visited, dir + 'U', n);
        if (y > 0) path(m, x, y - 1,visited, dir + 'L', n);
        if (x < n - 1) path(m, x + 1, y,visited, dir + 'D', n);
        if (y < n - 1) path(m, x, y + 1,visited, dir + 'R', n);
        visited[x][y] = 0;   
        
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<vector<int>> visited(n,vector<int>(n,0));
        op.clear();
        if(m[0][0]==0 || m[n-1][n-1]==0) return op;
        path(m,0,0,visited,"",n);
        sort(op.begin(),op.end());
        return op;
    }
};

    


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        sort(result.begin(), result.end());
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends
