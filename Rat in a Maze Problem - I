#include<bits/stdc++.h>
using namespace std;
#define ll long long int 
#define MAX 4

bool isSafe(int row,int col,int m[][MAX],int n,bool visited[][MAX]){
    if(row== -1 || row==n || col==-1 || col==n || visited[row][col] || m[row][col]==0)
        return false;
    return true;
}

void printPathUtil(int row,int col,int m[][MAX],int n,string&path,vector<string>&possiblePath,bool visited[][MAX]){
    if(row==-1 || row==n || col==-1 || col==n || visited[row][col] || m[row][col]==0)
        return;

    if(row==n-1 && col==n-1){
        possiblePath.push_back(path);
        return;
    }

    visited[row][col]=true;

    // for(int i=0;i<MAX;i++){
    //     for(int j=0;j<MAX;j++){
    //         cout<<visited[i][j]<<" ";
    //     }
    //     cout<<endl;
    // }

    if(isSafe(row+1,col,m,n,visited)){
        path.push_back('D');
        printPathUtil(row+1,col,m,n,path,possiblePath,visited);
        path.pop_back();
    }

    if(isSafe(row,col-1,m,n,visited)){
        path.push_back('L');
        printPathUtil(row,col-1,m,n,path,possiblePath,visited);
        path.pop_back();
    }

    if(isSafe(row,col+1,m,n,visited)){
        path.push_back('R');
        printPathUtil(row,col+1,m,n,path,possiblePath,visited);
        path.pop_back();
    }

    if(isSafe(row-1,col,m,n,visited)){
        path.push_back('U');
        printPathUtil(row-1,col,m,n,path,possiblePath,visited);
        path.pop_back();
    }

    visited[row][col]=false;
}


void printPath(int m[MAX][MAX],int n){
    vector<string>possiblePath;
    string path;
    bool visited[n][MAX];
    memset(visited,false,sizeof(visited));
    printPathUtil(0,0,m,n,path,possiblePath,visited);
    for(int i=0;i<possiblePath.size();i++)
        cout<<possiblePath[i]<<" ";
}

int main(){
    int m[MAX][MAX] = { {1, 0, 0, 0},
                        {1, 1, 0, 1}, 
                        {1, 1, 0, 0},
                        {0, 1, 1, 1}};
    int n = sizeof(m) / sizeof(m[0]);
    printPath(m, n);      
    return 0;
}
