//sudoko solver
#include<bits/stdc++.h>
using namespace std;

bool isValid(vector<vector<int>>board,int i,int j,int po){
    for(int k=0;k<9;k++){
        if(board[i][k]==po) return false;
    }
    for(int k=0;k<9;k++){
        if(board[k][j]==po) return false;
    }
    int ii=3*(i/3),ij=3*(j/3);
    for(int k=0;k<3;k++){
        for(int l=0;l<3;l++){
            if(board[ii+k][ij+l]==po){
                return false;
            }
        }
    }

    return true;
}
void display(vector<vector<int>>sudoko){
    for(int i=0;i<sudoko.size();i++){
        for(int j=0;j<sudoko[0].size();j++){
            cout<<sudoko[i][j]<<" ";
        }
        cout<<endl;
    }
}

void fillsudoko(vector<vector<int>>sudoko,int i,int j){
    // cout<<i<<" "<<j<<endl;
    // display(sudoko);
    if(i==sudoko.size()){
        display(sudoko);
        return;
    }
    int ni=0,nj=0;
    if(j==8){
        ni=i+1;
        nj=0;
    } else{
        ni=i;
        nj=j+1;
    }
    // cout<<ni<<" "<<nj<<endl;
    if(sudoko[i][j]!=0){
        fillsudoko(sudoko,ni,nj);
    }
    else{
        for(int po=1;po<=9;po++){
            if(isValid(sudoko,i,j,po)){
                sudoko[i][j]=po;
                fillsudoko(sudoko,ni,nj);
                sudoko[i][j]=0;
            }
        }
    }
}

int main()
{
    vector<vector<int>> sudoko(9,vector<int>(9,0));
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            cin>>sudoko[i][j];
        }
    }

    fillsudoko(sudoko,0,0);
    return 0;

}
